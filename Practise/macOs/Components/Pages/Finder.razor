@rendermode InteractiveServer
@inject macOs.Applications.AppList.App application




<style>
    /* Finder Window */
    .finder-window {
        width: 600px;
        background: #2c2c2e;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    }

    /* Header */
    .finder-header {
        display: flex;
        align-items: center;
        background: #3a3a3c;
        padding: 8px;
        color: white;
        font-size: 14px;
        font-weight: bold;
    }

    .buttons {
        display: flex;
        gap: 6px;
        margin-right: 10px;
    }

    .buttons span {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        display: inline-block;
    }

    .close {
        background: #ff5f57;
    }

    .minimize {
        background: #ffbd2e;
    }

    .maximize {
        background: #28c840;
    }

    /* Finder Body */
    .finder-body {
        display: flex;
    }

    /* Sidebar */
    .sidebar {
        width: 200px;
        background: #1c1c1e;
        padding: 10px;
        color: white;
    }

    .sidebar h3 {
        font-size: 12px;
        color: #aaa;
        margin-bottom: 5px;
    }

    .sidebar ul {
        list-style: none;
        padding: 0;
    }

    .sidebar li {
        padding: 5px;
        cursor: pointer;
    }

    .sidebar .active {
        font-weight: bold;
        color: #00aaff;
    }

    /* Content Area */
    .content {
        flex: 1;
        padding: 20px;
        color: white;
    }



    .finder-window {
        position: absolute;
        top: 100px;
        left: 200px;
        width: 600px;
        min-height: 200px;
        background: #2c2c2e;
        border-radius: 8px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        resize: both;
        overflow: auto;
        transition: transform 0.1s ease-in-out;
    }

    .finder-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        background: #3a3a3c;
        padding: 8px;
        color: white;
        font-size: 14px;
        font-weight: bold;
        cursor: grab;
    }

    .buttons {
        display: flex;
        gap: 6px;
        margin-left: 10px;
    }

    .buttons span {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        display: inline-block;
        cursor: pointer;
    }

    .close {
        background: #ff5f57;
    }

    .maximize {
        background: #28c840;
    }
</style>

<body>
    <div class="finder-window" style="@($"top: {posY}px; left: {posX}px;")" @onmousemove="HandleMouseMove"
        @onmouseup="EndDrag">

        <div class="finder-header" @onmousedown="StartDrag">
            <div class="buttons">
                <span class="close" @onclick="CloseFinder"></span>
                <span class="maximize" @onclick="ToggleMaximize"></span>
            </div>
            <span class="title">Desktop</span>
        </div>

        <div class="finder-body">
            <div class="sidebar">
                <h3>Favorites</h3>
                <ul>
                    <li>üìÇ Applications</li>
                    <li class="active">üìÅ Desktop</li>
                    <li>üìÑ Documents</li>
                    <li>üì• Downloads</li>
                    <li>üë§ Aakku</li>
                </ul>

                <h3>iCloud</h3>
                <ul>
                    <li>üåê Adarasha‚Äôs L...</li>
                    <li>‚òÅÔ∏è OneDrive</li>
                </ul>
            </div>

            <div class="content">
                <p>üì∑ rutine.jpg</p>
            </div>
        </div>
    </div>
</body>


@code {
    private double posX = 200, posY = 100;
    private double startX, startY;
    private bool isDragging = false;

    private void StartDrag(MouseEventArgs e)
    {
        isDragging = true;
        startX = e.ClientX - posX;
        startY = e.ClientY - posY;
    }

    private void HandleMouseMove(MouseEventArgs e)
    {
        if (isDragging)
        {
            posX = e.ClientX - startX;
            posY = e.ClientY - startY;
        }
    }

    private void EndDrag()
    {
        isDragging = false;
    }

    private void CloseFinder()
    {
        Console.WriteLine("Finder Closed");
    }

    private void ToggleMaximize()
    {
        Console.WriteLine("Maximized/Restored");
    }
}