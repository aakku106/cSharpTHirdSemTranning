@page "/weather"
@rendermode InteractiveServer
@using System.Net.Http
@using System.Net.Http.Json
@using System.Text.Json
@inject HttpClient Http

<head>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "SF Pro", "Segoe UI", Roboto, sans-serif;
            background: linear-gradient(to bottom, #cfd9df, #e2ebf0);
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }

        .weather-container {
            position: absolute;
            top:  15%;
            left:  45%;
            width: 400px;
            padding: 20px;
            border-radius: 24px;
            backdrop-filter: blur(15px);
            background: rgba(255, 255, 255, 0.2);
            box-shadow: 0 12px 36px rgba(0, 0, 0, 0.15);
            text-align: center;
            color: #222;
            transition: all 0.3s ease-in-out;
            border: 1px solid rgba(255, 255, 255, 0.4);
        }

        .weather-container:hover {
            transform: scale(1.03);
        }

        .search-box {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }

        input {
            flex: 1;
            padding: 12px;
            font-size: 16px;
            border: none;
            border-radius: 12px;
            background: rgba(255, 255, 255, 0.7);
            outline: none;
            color: #333;
            text-align: center;
            font-weight: 500;
            box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
            transition: all 0.2s;
        }

        input:focus {
            background: rgba(255, 255, 255, 0.9);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }

        button {
            padding: 12px 16px;
            background: linear-gradient(135deg, #007AFF, #005ecb);
            border: none;
            color: white;
            font-size: 16px;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.2s;
            box-shadow: 0 3px 6px rgba(0, 0, 0, 0.2);
        }

        button:hover {
            background: linear-gradient(135deg, #005ecb, #003f9a);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        .weather-info {
            margin-top: 15px;
            padding: 15px;
            font-size: 18px;
            font-weight: 500;
            background: rgba(255, 255, 255, 0.3);
            backdrop-filter: blur(10px);
            border-radius: 16px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }
    </style>
</head>

<div class="weather-container">
    <h3>üå§Ô∏è Weather App</h3>

    <div class="search-box">
        <input @bind="location" placeholder="Enter city name..." />
        <button @onclick="GetWeather">üîç</button>
    </div>

    @if (!string.IsNullOrEmpty(weatherInfo))
    {
        <div class="weather-info">
            <h4>@weatherInfo</h4>
        </div>
    }
</div>

@code {
    private string location = "";
    private string weatherInfo = "";

    private async Task GetWeather()
    {
        try
        {
            string apiKey = "e64f3af621ca41fd898125630252102";
            var response = await Http.GetFromJsonAsync<JsonElement>(
            $"http://api.weatherapi.com/v1/current.json?key={apiKey}&q={location}&aqi=no");

            // Extract details
            var city = response.GetProperty("location").GetProperty("name").GetString();
            var country = response.GetProperty("location").GetProperty("country").GetString();
            var temp = response.GetProperty("current").GetProperty("temp_c").GetDouble();
            var condition = response.GetProperty("current").GetProperty("condition").GetProperty("text").GetString();

            weatherInfo = $"{city}, {country}: {temp}¬∞C, {condition}";
        }
        catch
        {
            weatherInfo = "‚ùå Error fetching data. Try again!";
        } 
    }
}