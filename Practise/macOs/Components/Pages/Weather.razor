@page "/weather"
@rendermode InteractiveServer

@inject HttpClient Http

<head>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "SF Pro", "Segoe UI", Roboto, sans-serif;
            background: linear-gradient(to bottom, #eceff1, #cfd8dc);
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }

        .weather-container {
            width: 380px;
            padding: 20px;
            border-radius: 20px;
            backdrop-filter: blur(12px);
            background: rgba(255, 255, 255, 0.2);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15);
            text-align: center;
            color: #333;
            transition: all 0.3s ease-in-out;
        }

        .weather-container:hover {
            transform: scale(1.02);
        }

        .search-box {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }

        input {
            flex: 1;
            padding: 10px;
            font-size: 16px;
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.5);
            outline: none;
            color: #333;
        }

        button {
            padding: 10px 16px;
            background: #007AFF;
            border: none;
            color: white;
            font-size: 16px;
            border-radius: 10px;
            cursor: pointer;
            transition: 0.2s;
        }

        button:hover {
            background: #005ecb;
        }

        .weather-info img {
            width: 60px;
            height: 60px;
            margin: 10px 0;
        }

        .details {
            font-size: 14px;
            display: flex;
            justify-content: space-between;
            margin-top: 10px;
        }

        .detail-box {
            background: rgba(255, 255, 255, 0.3);
            padding: 10px;
            border-radius: 10px;
            text-align: center;
            width: 45%;
        }

        .detail-box p {
            margin: 5px 0;
            font-weight: bold;
        }

        .last-updated {
            margin-top: 15px;
            font-size: 12px;
            color: #666;
        }
    </style>
</head>

<div class="weather-container">
    <h3>‚òÅÔ∏è Weather App</h3>

    <div class="search-box">
        <input @bind="location" placeholder="Enter city name..." />
        <button @onclick="GetWeather">üîç</button>
    </div>

    @if (weather != null)
    {
        <div class="weather-info">
            <h4>@weather.Location.Name, @weather.Location.Country</h4>
            <p>@weather.Current.Condition.Text</p>
            <img src="@weather.Current.Condition.Icon" alt="Weather Icon" />
            <h2>@weather.Current.TempC¬∞C</h2>

            <div class="details">
                <div class="detail-box">
                    <p>üí® Wind</p>
                    <span>@weather.Current.WindKph km/h</span>
                </div>
                <div class="detail-box">
                    <p>üíß Humidity</p>
                    <span>@weather.Current.Humidity%</span>
                </div>
            </div>

            <p class="last-updated">Last updated: @weather.Current.LastUpdated</p>
        </div>
    }
</div>

@code {
    private string location = "London";
    private WeatherResponse? weather;

    private async Task GetWeather()
    {
        try
        {
            weather = await Http.GetFromJsonAsync<WeatherResponse>(
            $"http://api.weatherapi.com/v1/current.json?key=e64f3af621ca41fd898125630252102&q={location}&aqi=yes");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error fetching weather: " + ex.Message);
        }
    }

    public class WeatherResponse
    {
        public Location Location { get; set; } = new();
        public CurrentWeather Current { get; set; } = new();
    }

    public class Location
    {
        public string Name { get; set; } = "";
        public string Country { get; set; } = "";
    }

    public class CurrentWeather
    {
        public float TempC { get; set; }
        public int Humidity { get; set; }
        public float WindKph { get; set; }
        public WeatherCondition Condition { get; set; } = new();
        public string LastUpdated { get; set; } = "";
    }

    public class WeatherCondition
    {
        public string Text { get; set; } = "";
        public string Icon { get; set; } = "";
    }
}