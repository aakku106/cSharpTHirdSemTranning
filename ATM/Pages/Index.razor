@page "/"
@* @rendermode InteractiveServer *@

<style>
    *{
        transition: all 0.3s ease-in-out;
    }
    body {
        background-color: blanchedalmond;

        h1 {
            text-align: center;
        }
        button,.act{
            cursor: pointer !important;
        }

        input {
            @* background-color: red; *@
            width: 32.7vw;
            height: 5vh;
            box-shadow: 0px 0px 5px;
            &:hover{
                background-color: #32c4b125;
            }
            &:active{
                box-shadow: 0px 0px 10px;
                background-color: #f3f178ea;
            }
        }
        .summit{
            width: 32.7vw;
            height: 5vh;
            box-shadow: 0px 0px 5px;
            &:hover{
                background-color: #32c4b125;
            }
            &:active{
                box-shadow: 0px 0px 10px;
                background-color: #f3f178ea;
            }
        }

        .content {
            padding: 5vw;

            background-color: bisque;
            border-radius: 20px;

            .topic2 {
                text-align: center;
                background-color: #114c2616;
                padding: 15px;
                border-radius: 10px;
            }

            .newHolder {
                position: absolute;
                top: 40%;
                left: 50%;
                transform: translate(-50%, -50%);
                text-align: center;
                display: flex;
                flex-direction: column;
                justify-content: center;
                box-shadow: 0px 0px 15px;
                gap: 10px;
                padding: 20px;
                border-radius: 10px;
                background-color:transparent;
                backdrop-filter: blur(2.6px);
                background: linear-gradient(120deg,#b32c408d, #0fa54452);
                background-size: 1px;
                color: white;
            }

            #createNewUser {
                text-align: center;
                position: absolute;
                background-color: rgba(31, 31, 155, 0.494);
                padding: 15px;
                border-radius: 10px;
                top: 10px;
                right: 10px;
            }
        }
    }

    .showUsers {
        padding: 15px;
        border-radius: 10px;

        &:hover {
            background-color: #ffffff5e;
            cursor: pointer;
        }
    }

    .controls{
        position: absolute;
        display: flex;
        flex-direction: row !important;
        gap: 7px;
        z-index: 100;
        top: 22.3%;
        left: 35.4%;
        transform: translate(-50%, -50%);
        
    }
     .close{
            width: 13px;
            height: 13px;
            border-radius: 50%;
            background-color: red;
        }
    .minimize{
            background-color: yellow;
            width: 13px;
            height: 13px;
            border-radius: 50%;
        }
    .fullScreen{
            background-color: green;
            width: 13px;
            height: 13px;
            border-radius: 50%;
        }
</style>


<h1>Hello,WELCOME to CCN ATM service!</h1>

<div class="content">
    @if (userCounter == 0)
    {
        <h2 class="topic2" style="background-color: rgba(255, 0, 0, 0.048);">No USERS Available </h2>
    }
    else
    {
        <h2 class="topic2">USERS Available: @userCounter</h2>
    }

    <div class="addUser">
        <button id="createNewUser" @onclick="() => isClicked = true">Create new Account</button>
        @if (isClicked == true)
        {
                
        <div class="controls">
                <div class="act close" @onclick:stopPropagation @onclick="close"></div>
                <div class="act minimize"></div>
                <div class="act fullScreen"></div>
        </div>
            <div class="newHolder">
                    <h2>Enter your new data</h2>
                    @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <p style="color: red;">@errorMessage</p>
                }
                    <input type="text" placeholder="Enter your Account name/User name" @bind="userId">
                    <input type="password" placeholder="Enter your new password" @bind="userPassword">
                    <input type="password" placeholder="conform your new password" @bind="userPasswordConf">
                    <button type="submit" class="summit" @onclick="createNewUser" disabled="@isProcessing">SUMMIT</button>
            </div>
        }
    </div>

    <ul>
        @foreach (var i in listUser)
        {
            <li class="showUsers"> @i.UserId</li>
        }
    </ul>

</div>



@code {
    private  string userId = string.Empty;
    private string userPassword = string.Empty;
    private string userPasswordConf = string.Empty;

    private  int userCounter = 0;
    bool isClicked = false;
private static List<OnlineATM.UserAccount> listUser = new List<OnlineATM.UserAccount>();
   private string errorMessage = string.Empty;

private void createNewUser()
{
    if (string.IsNullOrWhiteSpace(userId) || string.IsNullOrWhiteSpace(userPassword))
    {
        errorMessage = "All fields are required!";
        return;
    }

    if (userPassword != userPasswordConf)
    {
        errorMessage = "Passwords do not match!";
        return;
    }

    ++userCounter;
    listUser.Add(new OnlineATM.UserAccount(userId, userPassword));
    isClicked = false;
    ClearForm();
    errorMessage = string.Empty;
}
    private void ClearForm()
    {
        userId = string.Empty;
        userPassword = string.Empty;
        userPasswordConf = string.Empty;
    }
    private bool isProcessing = false;
 private async Task close()
{
    isProcessing = true;
    isClicked = false;
    StateHasChanged();  
    await Task.Delay(1000);
    ClearForm();
    isProcessing = false;

}
}